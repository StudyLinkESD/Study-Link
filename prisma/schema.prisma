// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  name              String?
  firstName         String?
  lastName          String?
  profileCompleted  Boolean             @default(false)
  profilePicture    String?
  emailVerified     DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?
  student           Student?
  schoolOwner       SchoolOwner?
  companyOwner      CompanyOwner?
  admin             Admin?
  verificationToken VerificationToken[]
  Account           Account[]
}

model Student {
  id                      String           @id @default(cuid())
  user                    User             @relation(fields: [userId], references: [id])
  userId                  String           @unique
  school                  School           @relation(fields: [schoolId], references: [id])
  studentEmail            String           @unique
  schoolId                String
  primaryRecommendation   Recommendation?  @relation("PrimaryRecommendation", fields: [primaryRecommendationId], references: [id])
  primaryRecommendationId String?          @unique
  status                  String
  skills                  String
  apprenticeshipRythm     String?
  description             String
  curriculumVitae         String?
  previousCompanies       String
  availability            Boolean
  jobRequests             JobRequest[]
  recommendations         Recommendation[] @relation("StudentRecommendations")
}

model CompanyOwner {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

model Recommendation {
  id                String   @id @default(cuid())
  student           Student  @relation("StudentRecommendations", fields: [studentId], references: [id])
  studentId         String
  primaryForStudent Student? @relation("PrimaryRecommendation")
  company           Company  @relation(fields: [companyId], references: [id])
  companyId         String
  recommendation    String
}

model Company {
  id        String    @id @default(cuid())
  name      String
  logo      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  companyOwners   CompanyOwner[]
  jobs            Job[]
  recommendations Recommendation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  user       User     @relation(fields: [identifier], references: [email])

  @@id([identifier, token])
}

model SchoolOwner {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String @unique
  school   School @relation(fields: [schoolId], references: [id])
  schoolId String
}

model School {
  id        String                 @id @default(cuid())
  domain    AuthorizedSchoolDomain @relation(fields: [domainId], references: [id])
  domainId  String
  name      String
  logo      String?
  isActive  Boolean               @default(true)
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  deletedAt DateTime?

  students     Student[]
  schoolOwners SchoolOwner[]
}

model Admin {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model AuthorizedSchoolDomain {
  id     String @id @default(cuid())
  domain String

  schools School[]
}

model Job {
  id              String      @id @default(cuid())
  company         Company     @relation(fields: [companyId], references: [id])
  companyId       String
  name            String
  featuredImage   String?
  description     String
  skills          String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deletedAt       DateTime?

  jobRequests JobRequest[]
}

model JobRequest {
  id        String    @id @default(cuid())
  student   Student   @relation(fields: [studentId], references: [id])
  studentId String
  job       Job       @relation(fields: [jobId], references: [id])
  jobId     String
  status    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Account {
  id                String  @id @default(cuid())
  type              String?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
}
